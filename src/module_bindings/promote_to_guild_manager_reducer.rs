// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct PromoteToGuildManagerArgs {
    pub guild_id: u64,
    pub user_to_promote_id: __sdk::Identity,
}

impl From<PromoteToGuildManagerArgs> for super::Reducer {
    fn from(args: PromoteToGuildManagerArgs) -> Self {
        Self::PromoteToGuildManager {
            guild_id: args.guild_id,
            user_to_promote_id: args.user_to_promote_id,
        }
    }
}

impl __sdk::InModule for PromoteToGuildManagerArgs {
    type Module = super::RemoteModule;
}

pub struct PromoteToGuildManagerCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `promote_to_guild_manager`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait promote_to_guild_manager {
    /// Request that the remote module invoke the reducer `promote_to_guild_manager` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_promote_to_guild_manager`] callbacks.
    fn promote_to_guild_manager(
        &self,
        guild_id: u64,
        user_to_promote_id: __sdk::Identity,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `promote_to_guild_manager`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`PromoteToGuildManagerCallbackId`] can be passed to [`Self::remove_on_promote_to_guild_manager`]
    /// to cancel the callback.
    fn on_promote_to_guild_manager(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &u64, &__sdk::Identity) + Send + 'static,
    ) -> PromoteToGuildManagerCallbackId;
    /// Cancel a callback previously registered by [`Self::on_promote_to_guild_manager`],
    /// causing it not to run in the future.
    fn remove_on_promote_to_guild_manager(&self, callback: PromoteToGuildManagerCallbackId);
}

impl promote_to_guild_manager for super::RemoteReducers {
    fn promote_to_guild_manager(
        &self,
        guild_id: u64,
        user_to_promote_id: __sdk::Identity,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "promote_to_guild_manager",
            PromoteToGuildManagerArgs {
                guild_id,
                user_to_promote_id,
            },
        )
    }
    fn on_promote_to_guild_manager(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &u64, &__sdk::Identity) + Send + 'static,
    ) -> PromoteToGuildManagerCallbackId {
        PromoteToGuildManagerCallbackId(self.imp.on_reducer(
            "promote_to_guild_manager",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::PromoteToGuildManager {
                                    guild_id,
                                    user_to_promote_id,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, guild_id, user_to_promote_id)
            }),
        ))
    }
    fn remove_on_promote_to_guild_manager(&self, callback: PromoteToGuildManagerCallbackId) {
        self.imp
            .remove_on_reducer("promote_to_guild_manager", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `promote_to_guild_manager`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_promote_to_guild_manager {
    /// Set the call-reducer flags for the reducer `promote_to_guild_manager` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn promote_to_guild_manager(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_promote_to_guild_manager for super::SetReducerFlags {
    fn promote_to_guild_manager(&self, flags: __ws::CallReducerFlags) {
        self.imp
            .set_call_reducer_flags("promote_to_guild_manager", flags);
    }
}
